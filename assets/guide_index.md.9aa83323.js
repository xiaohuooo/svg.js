import{_ as s,c as a,o as n,R as p}from"./chunks/framework.e5840651.js";const _=JSON.parse('{"title":"SVG.js","description":"","frontmatter":{},"headers":[],"relativePath":"guide/index.md","lastUpdated":1682219043000}'),l={name:"guide/index.md"},o=p(`<h1 id="svg-js" tabindex="-1">SVG.js</h1><p>用于操作和动画化 SVG 的轻量级库。</p><h2 id="为什么选择-svg-js" tabindex="-1">为什么选择 SVG.js？</h2><p>SVG.js 没有依赖关系，旨在尽可能小，同时提供接近完整的 SVG 规范覆盖。如果您还不相信，这里有一些亮点。</p><h2 id="为什么选择-svg-js-1" tabindex="-1">为什么选择 SVG.js？</h2><p>SVG.js很快。显然没有vanilla js快，但比竞争对手快很多倍：</p><p>指数：</p><ul><li>rects：生成 10000 个矩形</li><li>fill：生成 10000 个填充颜色的矩形</li><li>gradient：生成 10000 个带有渐变填充的矩形</li></ul><p>越少越好。在英特尔酷睿 i7-4702MQ @ 2.2GHz 上测试。</p><h2 id="易于阅读、整洁的语法。" tabindex="-1">易于阅读、整洁的语法。</h2><p>单独使用 JavaScript 创建和操作 SVG 是非常冗长的。例如，仅创建一个简单的粉红色方块就需要相当多的代码：</p><p>SVG.js 提供了一种简洁易读的语法。与上面的香草js示例相同：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> draw </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SVG</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addTo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#drawing&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">rect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> draw.</span><span style="color:#B392F0;">rect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#f06&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> draw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SVG</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addTo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#drawing&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">rect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> draw.</span><span style="color:#6F42C1;">rect</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#f06&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>这只是两行代码，而不是十行代码！而且重复次数大大减少。</p><h2 id="疯狂的动画" tabindex="-1">疯狂的动画</h2><h2 id="还有更多" tabindex="-1">还有更多...</h2><p>关于大小，位置，转换，颜色的动画，... 模块化结构，无痛伸展 提供各种有用的插件 形状类型之间的统一 API，包括移动、大小、中心... 将事件绑定到元素 完全支持不透明度蒙版和剪切路径 文本路径，甚至动画 元素组 动态渐变和图案 完整记录（您正在查看它:)</p><h2 id="许可证" tabindex="-1">许可证</h2><p>SVG.js 根据 MIT 许可证的条款进行许可。</p><h2 id="更新日志" tabindex="-1">更新日志</h2><p>想知道最新版本中有哪些变化？查看更改日志。</p>`,21),e=[o];function t(c,r,i,d,E,y){return n(),a("div",null,e)}const F=s(l,[["render",t]]);export{_ as __pageData,F as default};
